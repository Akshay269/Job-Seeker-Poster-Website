datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  password      String
  username      String?
  isVerified    Boolean       @default(false)
  otp           String?
  otpExpires    DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  postedJobs    Job[]         @relation("JobPoster")      // Jobs this user has posted
  applications  Application[] @relation("Applicant")      // Jobs this user has applied to
  drafts        Draft[]
  refreshTokens RefreshToken[]
  resetTokens   PasswordResetToken[]
}

model RefreshToken {
  id           String   @id @default(uuid())
  tokenHash    String   @unique
  expiresAt    DateTime
  revoked      Boolean  @default(false)
  replacedById String?  // rotation tracking
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
}

model Job {
  id              String    @id @default(uuid())
  companyIcon     String?
  title           String
  companyName     String?
  location        String
  salaryRange     String?
  jobType         String? // e.g., Full-time, Internship
  experienceLevel String? // e.g., Entry, Mid, Senior
  requirements    String?
  skills          String?
  contactEmail    String?
  companyWebsite  String?
  deadline        DateTime?

  // Relations
  postedBy    User        @relation("JobPoster", fields: [postedById], references: [id])
  postedById  String
  applications Application[]
  drafts       Draft[]
  
  status       JobStatus   @default(ACTIVE)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Application {
  id            String            @id @default(uuid())
  appliedAt     DateTime          @default(now())
  status        ApplicationStatus @default(PENDING_REVIEW)

  // Relations
  jobId         String
  job           Job    @relation(fields: [jobId], references: [id])
  applicantId   String
  applicant     User   @relation("Applicant", fields: [applicantId], references: [id])

  // Application data
  personalInfo   Json
  contactInfo    Json
  experiences    Json
  educations     Json
  skills         Json
  certifications Json?
  languages      String[]
  resume         String
  coverLetter    String?
  portfolio      String?
  otherFiles     String[]  @default([])
  interviewDate  DateTime?
  interviewTime  String?
  meetingLink    String?
}

model Draft {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  job       Job      @relation(fields: [jobId], references: [id])
  jobId     String
  data      Json
  updatedAt DateTime @updatedAt
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

enum JobStatus {
  ACTIVE
  INACTIVE
}

enum ApplicationStatus {
  PENDING_REVIEW
  SHORTLISTED
  INTERVIEW_SCHEDULED
  REJECTED
}
